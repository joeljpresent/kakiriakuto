{"version":3,"sources":["utils.tsx","compare.tsx","VocabExercise.tsx","vocabs.tsx","VocabTable.tsx","MainContent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PageType","getShuffledArray","array","arr","i","length","j","Math","floor","random","PAGE_TYPES","sanitizeJap","txt","replace","sanitizeRomaji","SANITIZING_FR","Map","sanitizeFr","trim","toLowerCase","char","get","VocabExercise","props","handleChange","event","setState","inputText","target","value","handleSubmit","preventDefault","state","isCorrectAnswer","isLastQuestion","index","vocab","updatedVocab","correctCount","previousCorrectAnswer","wrongCount","getPreviousCorrectAnswer","line","isPlaying","console","log","shuffledVocab","words","this","exoType","FrToJap","input","expected","jap","FrToRomaji","Compare","romaji","JapToFr","fr","previousLine","error","question","onSubmit","getQuestionLine","type","onChange","disabled","React","Component","vocabs","conjonctions","annexe","VocabTable","map","key","pitch","MainContent","pageType","VocabularyList","selectedVocab","App","handleChangeVocab","Number","parseInt","handleChangePageType","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f135f3ac.chunk.js","sourcesContent":["export function getShuffledArray<T>(array: T[]) {\n    const arr = [...array];\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n\nexport function getTriplyShuffledArray<T>(array: T[]) {\n    return [\n        ...getShuffledArray(array),\n        ...getShuffledArray(array),\n        ...getShuffledArray(array),\n    ];\n}\n\n/** Data about a given vocabulary course */\nexport type VocabFile = {\n    /** Title of the vocabulary course */\n    title: string,\n    /** The YouTube ID of the video for the vocabulary course (e.g., `dQw4w9WgXcQ`) */\n    video_id?: string,\n    /** The words taught in the vocabulary course */\n    words: VocabLine[];\n};\n\n/** A vocabulary word with its translation and other information */\nexport type VocabLine = {\n    /** The Japanese word */\n    jap: string;\n    /** The romanized transcription of the Japanese word */\n    romaji: string;\n    /** The French translation of the word */\n    fr: string;\n    /** The intonation (pitch accent) of the Japanese word */\n    pitch?: string;\n};\n\nexport enum PageType {\n    VocabularyList,\n    FrToJap,\n    FrToRomaji,\n    JapToFr,\n}\n\nexport const PAGE_TYPES = [\n    \"Fiche de vocabulaire\",\n    \"Exercice FR → 日本語\",\n    \"Exercice FR → RÔMAJI\",\n    \"Exercice 日本語 → FR\",\n]\n","function sanitizeJap(txt: string) {\n    return txt.replace(/[\\s〜]/g, \"\");\n}\n\nexport function jap(input: string, expected: string) {\n    return sanitizeJap(input) === sanitizeJap(expected);\n}\n\nfunction sanitizeRomaji(txt: string) {\n    return txt.replace(/[\\s*-]/g, \"\");\n}\n\nexport function romaji(input: string, expected: string) {\n    return sanitizeRomaji(input) === sanitizeRomaji(expected);\n}\n\nconst SANITIZING_FR = new Map([\n    [\"à\", \"a\"], [\"â\", \"a\"], [\"ä\", \"a\"], [\"æ\", \"ae\"],\n    [\"é\", \"e\"], [\"è\", \"e\"], [\"ê\", \"e\"], [\"ë\", \"e\"],\n    [\"î\", \"i\"], [\"ï\", \"i\"],\n    [\"ô\", \"o\"], [\"ö\", \"o\"], [\"œ\", \"oe\"],\n    [\"ù\", \"u\"], [\"û\", \"u\"], [\"ü\", \"u\"],\n    [\"ÿ\", \"y\"],\n    [\"ç\", \"c\"], [\"ñ\", \"n\"], [\"ß\", \"ss\"],\n    [\"-\", \" \"], [\"'\", \" \"]\n]);\n\nfunction sanitizeFr(txt: string) {\n    return txt\n            .trim()\n            .toLowerCase()\n            .replace(/\\s*\\(.*\\)/, \"\")\n            .replace(/^(le |la |l'|les )/, \"\")\n            .replace(/./g, (char: string) =>\n                SANITIZING_FR.get(char) ?? char\n            )\n}\n\nexport function fr(input: string, expected: string) {\n    return sanitizeFr(input) === sanitizeFr(expected);\n}\n","import React from 'react';\nimport * as Compare from './compare';\nimport { getTriplyShuffledArray, PageType, VocabFile, VocabLine } from './utils';\n\nclass VocabExercise extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        const shuffledVocab = getTriplyShuffledArray(props.vocab.words);\n\n        this.state = {\n            inputText: '',\n            vocab: shuffledVocab,\n            line: shuffledVocab[0],\n            previousCorrectAnswer: null,\n            correctCount: 0,\n            wrongCount: 0,\n            index: 0,\n            isPlaying: true,\n        };\n    }\n\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({inputText: event.target.value})\n    };\n\n    handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        if (!this.state.inputText) {\n            return;\n        }\n        const isCorrectAnswer = this.isCorrectAnswer();\n        const isLastQuestion = this.state.index >= this.state.vocab.length - 1;\n        const updatedVocab = [\n            ...this.state.vocab,\n            this.state.vocab[this.state.index],\n        ];\n\n        if (isCorrectAnswer) {\n            this.setState(state => ({\n                correctCount: state.correctCount + 1,\n                previousCorrectAnswer: null,\n            }));\n        } else {\n            this.setState(state => ({\n                wrongCount: state.wrongCount + 1,\n                previousCorrectAnswer: this.getPreviousCorrectAnswer(state.line),\n                vocab: updatedVocab,\n            }));\n        }\n        if (isLastQuestion && isCorrectAnswer) {\n            this.setState({\n                inputText: '',\n                isPlaying: false,\n            });\n        } else {\n            this.setState(state => ({\n                index: state.index + 1,\n                line: updatedVocab[this.state.index + 1],\n                inputText: '',\n            }));\n        }\n        console.log(this.state.inputText);\n    }\n\n    isCorrectAnswer() {\n        switch (this.props.exoType) {\n            case PageType.FrToJap:\n                return Compare.jap(this.state.inputText, this.state.line.jap);\n            case PageType.FrToRomaji:\n                return Compare.romaji(this.state.inputText, this.state.line.romaji);\n            case PageType.JapToFr:\n                return Compare.fr(this.state.inputText, this.state.line.fr);\n        }\n    }\n\n    getPreviousCorrectAnswer(previousLine: VocabLine) {\n        switch (this.props.exoType) {\n            case PageType.FrToJap:\n                return `${previousLine.jap} (${previousLine.romaji})`;\n            case PageType.FrToRomaji:\n                return previousLine.romaji;\n            case PageType.JapToFr:\n                return previousLine.fr;\n        }\n        console.error(\"Unknown exercise type!\");\n        return null;\n    }\n\n    getQuestionLine() {\n        const question = this.props.exoType === PageType.JapToFr\n                       ? this.state.line.jap\n                       : this.state.line.fr;\n        return this.state.isPlaying ? question : \"Terminé !\";\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <h2>{this.getQuestionLine()}</h2>\n                <input\n                    type=\"text\" value={this.state.inputText}\n                    onChange={this.handleChange} disabled={!this.state.isPlaying}\n                />\n                <input type=\"submit\" value=\"Valider\" disabled={!this.state.isPlaying} />\n                <div>\n                    {\n                        (this.state.previousCorrectAnswer != null)\n                        ? <p>La bonne réponse était {this.state.previousCorrectAnswer}</p>\n                        : null\n                    }\n                    <p>Correct: {this.state.correctCount}</p>\n                    <p>Faux: {this.state.wrongCount}</p>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default VocabExercise;\n\ntype Props = {\n    vocab: VocabFile,\n    exoType: PageType,\n};\n\ntype State = {\n    inputText: string,\n    vocab: VocabLine[],\n    line: VocabLine,\n    previousCorrectAnswer: string | null,\n    correctCount: number,\n    wrongCount: number,\n    index: number,\n    isPlaying: boolean,\n};\n","import { VocabFile } from \"./utils\";\nimport annexe from './vocab/annexe.json';\nimport conjonctions from './vocab/conjonctions.json';\nimport premiers_kanji from './vocab/premiers_kanji.json';\nimport yasashii from \"./vocab/yasashii.json\"\n\n/** Array of all vocabulary files */\nconst vocabs: VocabFile[] = [\n    premiers_kanji,\n    conjonctions,\n    annexe,\n    yasashii,\n];\n\nexport default vocabs;\n","import React from \"react\";\nimport { VocabFile } from \"./utils\";\n\nclass VocabTable extends React.Component<Props, State> {\n    render() {\n        return (\n            <table>\n                <thead><tr>\n                    <td>Traduction</td>\n                    <td>Japonais</td>\n                    <td>Intonation</td>\n                    <td>Rômaji</td>\n                </tr></thead>\n                <tbody>\n                {\n                    this.props.vocab.words.map((line, index) => <tr key={line.fr + index}>\n                        <td>{line.fr}</td>\n                        <td>{line.jap}</td>\n                        <td>{line.pitch ?? <i>inconnu</i>}</td>\n                        <td>{line.romaji}</td>\n                    </tr>)\n                }\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default VocabTable;\n\ntype Props = {\n    vocab: VocabFile,\n};\ntype State = {};\n","import React from 'react';\nimport { PageType } from './utils';\nimport VocabExercise from './VocabExercise';\nimport vocabs from './vocabs';\nimport VocabTable from './VocabTable';\n\nclass MainContent extends React.Component<Props, State> {\n    render() {\n        if (this.props.pageType === PageType.VocabularyList) {\n            return (<div>\n                <h2>La fiche de vocabulaire</h2>\n                <VocabTable vocab={vocabs[this.props.selectedVocab]} />\n            </div>);\n        } else {\n            return (<div>\n                <h2>Exercice</h2>\n                <VocabExercise\n                    vocab={vocabs[this.props.selectedVocab]}\n                    exoType={this.props.pageType}\n                />\n            </div>);\n        }\n    }\n}\n\nexport default MainContent;\n\ntype Props = {\n    selectedVocab: number,\n    pageType: number,\n};\ntype State = {};\n","import React from 'react';\nimport MainContent from './MainContent';\nimport { PageType, PAGE_TYPES } from './utils';\nimport vocabs from './vocabs';\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n\n    this.state = {\n      selectedVocab: 0,\n      pageType: 0,\n    }\n  }\n\n  handleChangeVocab = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      selectedVocab: Number.parseInt(event.target.value, 10) ?? 0,\n      pageType: PageType.VocabularyList,\n    });\n  }\n\n  handleChangePageType = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      pageType: Number.parseInt(event.target.value, 10) ?? 0,\n    });\n  }\n\n  render() {\n    return (\n      <header>\n        <h1>KakiRiakuto</h1>\n        <select value={this.state.selectedVocab} onChange={this.handleChangeVocab}>{\n          vocabs.map((vocab, index) =>\n            <option value={index} key={index}>{vocab.title}</option>\n          )\n        }</select>\n        <select value={this.state.pageType} onChange={this.handleChangePageType}>{\n          PAGE_TYPES.map((pageType, index) =>\n            <option value={index} key={index}>{pageType}</option>\n          )\n        }</select>\n        <MainContent selectedVocab={this.state.selectedVocab} pageType={this.state.pageType} />\n      </header>\n    );\n  }\n}\n\nexport default App;\n\ntype Props = {};\ntype State = {\n  selectedVocab: number,\n  pageType: number,\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}